//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub when: Option<String>,
    pub deadline: Option<String>,
    pub parent: Option<i32>,
    pub title: String,
    pub body: Option<String>,
    pub r#type: String,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Parent",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::timeblock::Entity")]
    Timeblock,
}

impl Related<super::timeblock::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Timeblock.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
